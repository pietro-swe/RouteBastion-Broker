// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package generated

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
	go_uuid "github.com/satori/go.uuid"
)

type CargoKind string

const (
	CargoKindBulkCargo                      CargoKind = "bulk_cargo"
	CargoKindContainerizedCargo             CargoKind = "containerized_cargo"
	CargoKindRefrigeratedCargo              CargoKind = "refrigerated_cargo"
	CargoKindDryCargo                       CargoKind = "dry_cargo"
	CargoKindAliveCargo                     CargoKind = "alive_cargo"
	CargoKindDangerousCargo                 CargoKind = "dangerous_cargo"
	CargoKindFragileCargo                   CargoKind = "fragile_cargo"
	CargoKindIndivisibleAndExceptionalCargo CargoKind = "indivisible_and_exceptional_cargo"
	CargoKindVehicleCargo                   CargoKind = "vehicle_cargo"
)

func (e *CargoKind) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CargoKind(s)
	case string:
		*e = CargoKind(s)
	default:
		return fmt.Errorf("unsupported scan type for CargoKind: %T", src)
	}
	return nil
}

type NullCargoKind struct {
	CargoKind CargoKind
	Valid     bool // Valid is true if CargoKind is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCargoKind) Scan(value interface{}) error {
	if value == nil {
		ns.CargoKind, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CargoKind.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCargoKind) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CargoKind), nil
}

type CommunicationMethod string

const (
	CommunicationMethodRest            CommunicationMethod = "rest"
	CommunicationMethodProtocolBuffers CommunicationMethod = "protocol_buffers"
)

func (e *CommunicationMethod) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CommunicationMethod(s)
	case string:
		*e = CommunicationMethod(s)
	default:
		return fmt.Errorf("unsupported scan type for CommunicationMethod: %T", src)
	}
	return nil
}

type NullCommunicationMethod struct {
	CommunicationMethod CommunicationMethod
	Valid               bool // Valid is true if CommunicationMethod is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCommunicationMethod) Scan(value interface{}) error {
	if value == nil {
		ns.CommunicationMethod, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CommunicationMethod.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCommunicationMethod) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CommunicationMethod), nil
}

type ConstraintKind string

const (
	ConstraintKindBudget       ConstraintKind = "budget"
	ConstraintKindAvailability ConstraintKind = "availability"
	ConstraintKindPerformance  ConstraintKind = "performance"
	ConstraintKindSecurity     ConstraintKind = "security"
	ConstraintKindFeature      ConstraintKind = "feature"
)

func (e *ConstraintKind) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ConstraintKind(s)
	case string:
		*e = ConstraintKind(s)
	default:
		return fmt.Errorf("unsupported scan type for ConstraintKind: %T", src)
	}
	return nil
}

type NullConstraintKind struct {
	ConstraintKind ConstraintKind
	Valid          bool // Valid is true if ConstraintKind is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullConstraintKind) Scan(value interface{}) error {
	if value == nil {
		ns.ConstraintKind, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ConstraintKind.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullConstraintKind) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ConstraintKind), nil
}

type OptimizationStatus string

const (
	OptimizationStatusEnqueued OptimizationStatus = "enqueued"
	OptimizationStatusRunning  OptimizationStatus = "running"
	OptimizationStatusExecuted OptimizationStatus = "executed"
	OptimizationStatusFailed   OptimizationStatus = "failed"
	OptimizationStatusCanceled OptimizationStatus = "canceled"
)

func (e *OptimizationStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = OptimizationStatus(s)
	case string:
		*e = OptimizationStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for OptimizationStatus: %T", src)
	}
	return nil
}

type NullOptimizationStatus struct {
	OptimizationStatus OptimizationStatus
	Valid              bool // Valid is true if OptimizationStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullOptimizationStatus) Scan(value interface{}) error {
	if value == nil {
		ns.OptimizationStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.OptimizationStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullOptimizationStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.OptimizationStatus), nil
}

type RequestKind string

const (
	RequestKindSync  RequestKind = "sync"
	RequestKindBatch RequestKind = "batch"
)

func (e *RequestKind) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = RequestKind(s)
	case string:
		*e = RequestKind(s)
	default:
		return fmt.Errorf("unsupported scan type for RequestKind: %T", src)
	}
	return nil
}

type NullRequestKind struct {
	RequestKind RequestKind
	Valid       bool // Valid is true if RequestKind is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRequestKind) Scan(value interface{}) error {
	if value == nil {
		ns.RequestKind, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.RequestKind.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRequestKind) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.RequestKind), nil
}

type Constraint struct {
	ID         go_uuid.UUID
	CustomerID go_uuid.UUID
	Kind       ConstraintKind
	Value      []byte
	CreatedAt  pgtype.Timestamp
	ModifiedAt pgtype.Timestamp
	DeletedAt  pgtype.Timestamp
}

type ModelApiKey struct {
	ID         go_uuid.UUID
	Key        string
	CustomerID go_uuid.UUID
	CreatedAt  pgtype.Timestamp
	ModifiedAt pgtype.Timestamp
	DeletedAt  pgtype.Timestamp
}

type ModelCustomer struct {
	ID                 go_uuid.UUID
	Name               string
	BusinessIdentifier string
	CreatedAt          pgtype.Timestamp
	ModifiedAt         pgtype.Timestamp
	DeletedAt          pgtype.Timestamp
}

type ModelOptimization struct {
	ID              go_uuid.UUID
	CustomerID      go_uuid.UUID
	SelectedCloudID go_uuid.UUID
	Status          OptimizationStatus
	Kind            RequestKind
	Cost            pgtype.Numeric
	StartedAt       pgtype.Timestamp
	EndedAt         pgtype.Timestamp
	CreatedAt       pgtype.Timestamp
	ModifiedAt      pgtype.Timestamp
}

type ModelOptimizationVehicle struct {
	OptimizationID go_uuid.UUID
	VehicleID      go_uuid.UUID
}

type ModelOptimizationWaypoint struct {
	ID             go_uuid.UUID
	OptimizationID go_uuid.UUID
	Latitude       float64
	Longitude      float64
}

type ModelProvider struct {
	ID         go_uuid.UUID
	Name       string
	CreatedAt  pgtype.Timestamp
	ModifiedAt pgtype.Timestamp
	DeletedAt  pgtype.Timestamp
}

type ModelProviderCommunication struct {
	ID             go_uuid.UUID
	ProviderID     go_uuid.UUID
	AccessibleWith CommunicationMethod
	Url            string
	CreatedAt      pgtype.Timestamp
	ModifiedAt     pgtype.Timestamp
	DeletedAt      pgtype.Timestamp
}

type ModelProviderConstraintsAndFeatures struct {
	ID                         go_uuid.UUID
	ProviderID                 go_uuid.UUID
	MaxWaypoints               int32
	SupportsAsyncBatchRequests bool
}

type ModelVehicle struct {
	ID         go_uuid.UUID
	Plate      string
	Capacity   float64
	CargoType  CargoKind
	CustomerID go_uuid.UUID
	CreatedAt  pgtype.Timestamp
	ModifiedAt pgtype.Timestamp
	DeletedAt  pgtype.Timestamp
}
